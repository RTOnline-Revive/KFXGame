/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef KFXGAME_API
#define KFXGAME_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern KFXGAME_API FName KFXGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AddPlayerScoreInfo)
AUTOGENERATE_NAME(DeleteAllPVEDefault)
AUTOGENERATE_NAME(DeleteOnePlayerDefault)
AUTOGENERATE_NAME(DeletePVEPlayerDefault)
AUTOGENERATE_NAME(DeletePVERandDefault)
AUTOGENERATE_NAME(GetConfigTableByIndex)
AUTOGENERATE_NAME(GetPVENextMap)
AUTOGENERATE_NAME(GetPVENextMapID)
AUTOGENERATE_NAME(GetPVENextRules)
AUTOGENERATE_NAME(KFXKillRoleInGame)
AUTOGENERATE_NAME(KFXOnCommand)
AUTOGENERATE_NAME(KFXStartGame)
AUTOGENERATE_NAME(KFXStartPVEGame)
AUTOGENERATE_NAME(OnMicTestDone)
AUTOGENERATE_NAME(OnSpeakTestDone)
AUTOGENERATE_NAME(PlayerBuyItemResponse)
AUTOGENERATE_NAME(SetAgentDefaultData)
AUTOGENERATE_NAME(SetPlayerEquipedListItem)

#ifndef NAMES_ONLY

enum PVEGameState
{
    PVEState_Start          =0,
    PVEState_Matching       =1,
    PVEState_MatchOver      =2,
    PVEState_MAX            =3,
};
enum EREALM_GS_COMMAND
{
    EREALM_COMMAND_NONE     =0,
    EREALM_COMMAND_ENDGAME  =1,
    EREALM_MAX              =2,
};
enum KFX_GAME_RESULT
{
    KFX_FLEE                =0,
    KFX_VICTORY             =1,
    KFX_DEUCE               =2,
    KFX_DEFEATED            =3,
    KFX_NONE                =4,
    KFX_MAX                 =5,
};
enum _Action_Class
{
    _EA_EXP                 =0,
    _EA_GAME_COIN           =1,
    _EA_POINT               =2,
    _EA_MOVE                =3,
    _MAX                    =4,
};
struct KFXGAME_API FFAgentItemData
{
    INT ItemType GCC_PACK(4);
    INT ItemDurable;
    INT ItemEquiped;
};

struct KFXGAME_API FPlayerWeaponComponentsBlock
{
    TArrayNoInit<INT> EquipedWeaponComponents GCC_PACK(4);
    TArrayNoInit<INT> UnEquipedWeaponComponents;
};

struct KFXGAME_API FFactionEndGameInfo
{
    INT m_uiTeamType GCC_PACK(4);
    INT m_uiGameResult;
    INT m_iCurPointAdd;
    INT m_iGameTicketAdd;
    INT m_iMmrAdd;
};

struct KFXGAME_API FKFXEndGameInfo
{
    INT nWinTeamIndex GCC_PACK(4);
    INT nGameResult;
    INT nTotalRound;
};

struct KFXGAME_API FCurEquipItemsListType
{
    INT SessionID GCC_PACK(4);
    INT MajorWeaponID;
    INT MinorWeaponID;
    INT MeleeWeaponID;
    INT Grenades[3];
    INT Body[2];
    INT BodyPendents[9];
    FPlayerWeaponComponentsBlock PlayerWeaponComponents;
};

struct KFXGAME_API FMissionData
{
    INT HighID GCC_PACK(4);
    INT LowID;
    INT MissionID;
};

struct KFXGAME_API FPlayerMissionData
{
    INT PlayerIndex GCC_PACK(4);
    TArrayNoInit<FMissionData> Missions;
};

struct KFXGAME_API FBasePlayerDataBlock
{
    INT SessionID GCC_PACK(4);
    INT CommRifleKillCount;
    INT AssaultKillCount;
    INT SniperKillCount;
    INT ScatterKillCount;
    INT MachinegunKillCount;
    INT PistolKillCount;
    INT GrenadeKillCount;
    INT RemoveBombCount;
    INT InstallBombCount;
    INT FirstBooldCount;
    INT DoubleKillCount;
    INT ThreeKillCount;
    INT FiveKillCount;
    INT HeadKillCount;
    INT KnifeKillCount;
    INT KillCount;
    INT DeathCount;
    INT KillGhostCount;
    INT KillBotCount;
    BYTE KillVipCount;
    BYTE ChamPoinCount;
    INT GameResult GCC_PACK(4);
    INT Experience;
    INT GameCash;
    INT SPoint;
    FFAgentItemData DurableItemList[10];
    INT RewardTime;
    INT RewardBossCnt;
    INT KillMeMost;
};

struct KFXGAME_API FPlayerDataBlockExtra
{
    INT SessionID GCC_PACK(4);
    INT PlayerContribution;
    BYTE VIPEscapeTimes;
    BYTE ACEOrder;
    INT GhostKillCount GCC_PACK(4);
    INT CorpseKillCount;
    INT KillCorpseCount;
    INT GainItem[20];
};

struct KFXGAME_API FKFXPlayerInfo
{
    INT PlayerID GCC_PACK(4);
    INT SessionID;
    INT RealmIP;
    INT RealmPort;
    FStringNoInit PlayerName;
    INT RoleID;
    BYTE TeamID;
    BYTE nLevel;
    INT nMajorWeaponID GCC_PACK(4);
    INT nMinorWeaponID;
    INT nMeleeWeaponID;
    INT nGrenades[3];
    BYTE nVipLevel;
    BYTE nNetBarMode;
    INT nKillCount GCC_PACK(4);
    INT nDeathCount;
    INT nHeadKillCount;
    INT nKnifeKillCount;
    INT nSpeicalKillCount;
    BYTE nGameResult;
    INT nExperience GCC_PACK(4);
    INT nGameCash;
    INT nDanceCardBit;
    FLOAT fSPointGainSpeed;
    INT nSPoint;
    INT nTotalSPoint;
    INT nIndividualGrade;
    INT nTeamGrade;
    INT AvatarBody;
    INT AvatarHead;
    INT AvatarLegs;
    INT Suit;
    INT FactionID;
    INT FactionIconID;
    FStringNoInit FactionName;
    FLOAT FactionCashFactor;
    INT nIsMember;
    INT RewardTime;
    INT RewardCount;
    BYTE nSpectatorView;
    INT nGainItem[5] GCC_PACK(4);
    INT uWinFactionID;
    INT uWinSpoint;
    INT uLostSpoint;
    FPlayerMissionData MissionBlock;
    INT level_netbar;
    FLOAT xp_netbar[4];
    INT bWantToBeVIP;
};

struct KFXGAME_API FKFXPlayerInfoEx
{
    TArrayNoInit<INT> mutate_roles GCC_PACK(4);
};

struct KFXGAME_API FKFXPlayerWeaponsBakInfo
{
    INT SessionID GCC_PACK(4);
    INT nMajorWeapons[30];
};

struct KFXGAME_API FKFXBagPropsInfo
{
    INT SessionID GCC_PACK(4);
    INT nBagProps[30];
};

struct KFXGAME_API FKFXPlayerExpInfo
{
    INT SessionID GCC_PACK(4);
    INT ActionType[4];
    FLOAT ActionRate[4];
};

struct KFXGAME_API FKFXGameData
{
    INT nMapID GCC_PACK(4);
    INT nGameMode;
    INT nTimeLimit;
    INT nRounds;
    INT nKillLimit;
    INT nWeapLimit;
    INT nRestartTime;
    INT nGameOptParam;
    INT nNotCountKill;
    FLOAT fExpFactor;
    FLOAT fSPointFactor;
    FLOAT fGameCoinFactor;
    FLOAT fHonorPointRate;
    FLOAT fGameTimeRate;
    INT nGameType;
    INT nBotModeConfig;
    INT nRealmCommand;
    INT nStartGuanNum;
    INT PVEDifficulty;
};

struct KFXGAME_API FPVERandData
{
    INT nRulesID GCC_PACK(4);
    INT nMapID;
};

struct KFXGAME_API FKFXPVEPlayerData
{
    INT SessionID GCC_PACK(4);
    INT InitialNormalRestartCoinsNum;
    INT InitialDeadRestartCoinsNum;
    INT UsedNormalRestartCoinsNum;
    INT UsedDeadRestartCoinsNum;
    INT UsedFreeRestartNum;
    INT PerGuanScore;
    INT TotalGuanScore;
    INT PerGuanTime;
    INT TotalGuanTime;
    INT PVELevel;
    INT PVELevelExp;
    INT PVECurDropItemNum;
};

#define UCONST_G_MaxGuanNum 54
#define UCONST_MAX_ActionAdd_Num 4
#define UCONST_MAX_Netbar_Action 4
#define UCONST_MAX_DURABLE_CNT 10
#define UCONST_KFX_GRENADE_CNT 3
#define UCONST_BODY_PENDANT_CNT 9
#define UCONST_BODY_CNT 2
#define UCONST_WEAPON_PENDANT_CNT 6
#define UCONST_WEAPON_CLS_COUNT 15
#define UCONST_KFX_PLAYERITEMS_COUNT 120
#define UCONST_KFX_CUR_ITEM_COUNT 20
#define UCONST_KFX_GAIN_ITEM_NUM 5
#define UCONST_KFX_GAIN_ITEM_COUNT 20
#define UCONST_KFX_BAGPROP_CNT 30
#define UCONST_KFX_MAJORWEAP_CNT 30

struct AKFXFaeryAgent_eventSetAgentDefaultData_Parms
{
};
struct AKFXFaeryAgent_eventDeleteAllPVEDefault_Parms
{
};
struct AKFXFaeryAgent_eventPlayerBuyItemResponse_Parms
{
    INT PlayerID;
    INT ItemID;
};
struct AKFXFaeryAgent_eventSetPlayerEquipedListItem_Parms
{
    INT PlayerIndex;
    INT ItemID;
};
struct AKFXFaeryAgent_eventDeletePVEPlayerDefault_Parms
{
};
struct AKFXFaeryAgent_eventDeletePVERandDefault_Parms
{
};
struct AKFXFaeryAgent_eventKFXStartPVEGame_Parms
{
};
struct AKFXFaeryAgent_eventGetPVENextMapID_Parms
{
    INT ReturnValue;
};
struct AKFXFaeryAgent_eventGetPVENextMap_Parms
{
    FString ReturnValue;
};
struct AKFXFaeryAgent_eventGetPVENextRules_Parms
{
    INT ReturnValue;
};
struct AKFXFaeryAgent_eventKFXStartGame_Parms
{
};
struct AKFXFaeryAgent_eventDeleteOnePlayerDefault_Parms
{
    INT RoleID;
};
struct AKFXFaeryAgent_eventAddPlayerScoreInfo_Parms
{
    INT RoleID;
    TArray<INT> ItemID;
};
struct AKFXFaeryAgent_eventKFXKillRoleInGame_Parms
{
    INT RoleID;
};
struct AKFXFaeryAgent_eventKFXOnCommand_Parms
{
    INT Command;
};
class KFXGAME_API AKFXFaeryAgent : public AInfo
{
public:
    TArrayNoInit<FCurEquipItemsListType> CurEquipItemsList GCC_PACK(4);
    TArrayNoInit<FBasePlayerDataBlock> BasePlayersData;
    TArrayNoInit<FPlayerDataBlockExtra> PlayersDataExtra;
    BITFIELD bPVEGame:1 GCC_PACK(4);
    BITFIELD bHasOtherGuan:1;
    TArrayNoInit<FPVERandData> PVERandGame GCC_PACK(4);
    INT PVEStartGuan;
    INT CurGuanIndex;
    BITFIELD bCanRestartGame:1 GCC_PACK(4);
    TArrayNoInit<FKFXPVEPlayerData> PVEPlayerData GCC_PACK(4);
    FFactionEndGameInfo KFXFactionEndGameInfo[2];
    FKFXEndGameInfo EndGameInfo;
    TArrayNoInit<FKFXPlayerInfo> Players;
    TArrayNoInit<FKFXPlayerInfoEx> PlayersInfoEx;
    TArrayNoInit<FKFXPlayerExpInfo> PlayersExp;
    TArrayNoInit<FKFXPlayerWeaponsBakInfo> PlayerWeapons;
    TArrayNoInit<FKFXBagPropsInfo> PlayerBagProps;
    FKFXGameData Game;
    DECLARE_FUNCTION(execGetItemDurable);
    DECLARE_FUNCTION(execIsItemInEquipList);
    DECLARE_FUNCTION(execNotifyPlayerLogInGameServer);
    DECLARE_FUNCTION(execKFXIsKFXServerMode);
    DECLARE_FUNCTION(execKFXGetAgent);
    DECLARE_FUNCTION(execKFXUnRegist);
    DECLARE_FUNCTION(execKFXRegist);
    DECLARE_FUNCTION(execKFXNotifyPlayerLeave);
    DECLARE_FUNCTION(execKFXNotifyGameEnd);
    DECLARE_FUNCTION(execKFXNotifyGameReady);
    void eventSetAgentDefaultData()
    {
        ProcessEvent(FindFunctionChecked(KFXGAME_SetAgentDefaultData),NULL);
    }
    void eventDeleteAllPVEDefault()
    {
        ProcessEvent(FindFunctionChecked(KFXGAME_DeleteAllPVEDefault),NULL);
    }
    void eventPlayerBuyItemResponse(INT PlayerID, INT ItemID)
    {
        AKFXFaeryAgent_eventPlayerBuyItemResponse_Parms Parms;
        Parms.PlayerID=PlayerID;
        Parms.ItemID=ItemID;
        ProcessEvent(FindFunctionChecked(KFXGAME_PlayerBuyItemResponse),&Parms);
    }
    void eventSetPlayerEquipedListItem(INT PlayerIndex, INT ItemID)
    {
        AKFXFaeryAgent_eventSetPlayerEquipedListItem_Parms Parms;
        Parms.PlayerIndex=PlayerIndex;
        Parms.ItemID=ItemID;
        ProcessEvent(FindFunctionChecked(KFXGAME_SetPlayerEquipedListItem),&Parms);
    }
    void eventDeletePVEPlayerDefault()
    {
        ProcessEvent(FindFunctionChecked(KFXGAME_DeletePVEPlayerDefault),NULL);
    }
    void eventDeletePVERandDefault()
    {
        ProcessEvent(FindFunctionChecked(KFXGAME_DeletePVERandDefault),NULL);
    }
    void eventKFXStartPVEGame()
    {
        ProcessEvent(FindFunctionChecked(KFXGAME_KFXStartPVEGame),NULL);
    }
    INT eventGetPVENextMapID()
    {
        AKFXFaeryAgent_eventGetPVENextMapID_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(KFXGAME_GetPVENextMapID),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetPVENextMap()
    {
        AKFXFaeryAgent_eventGetPVENextMap_Parms Parms;
        ProcessEvent(FindFunctionChecked(KFXGAME_GetPVENextMap),&Parms);
        return Parms.ReturnValue;
    }
    INT eventGetPVENextRules()
    {
        AKFXFaeryAgent_eventGetPVENextRules_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(KFXGAME_GetPVENextRules),&Parms);
        return Parms.ReturnValue;
    }
    void eventKFXStartGame()
    {
        ProcessEvent(FindFunctionChecked(KFXGAME_KFXStartGame),NULL);
    }
    void eventDeleteOnePlayerDefault(INT RoleID)
    {
        AKFXFaeryAgent_eventDeleteOnePlayerDefault_Parms Parms;
        Parms.RoleID=RoleID;
        ProcessEvent(FindFunctionChecked(KFXGAME_DeleteOnePlayerDefault),&Parms);
    }
    void eventAddPlayerScoreInfo(INT RoleID, TArray<INT> ItemID)
    {
        AKFXFaeryAgent_eventAddPlayerScoreInfo_Parms Parms;
        Parms.RoleID=RoleID;
        Parms.ItemID=ItemID;
        ProcessEvent(FindFunctionChecked(KFXGAME_AddPlayerScoreInfo),&Parms);
    }
    void eventKFXKillRoleInGame(INT RoleID)
    {
        AKFXFaeryAgent_eventKFXKillRoleInGame_Parms Parms;
        Parms.RoleID=RoleID;
        ProcessEvent(FindFunctionChecked(KFXGAME_KFXKillRoleInGame),&Parms);
    }
    void eventKFXOnCommand(INT Command)
    {
        AKFXFaeryAgent_eventKFXOnCommand_Parms Parms;
        Parms.Command=Command;
        ProcessEvent(FindFunctionChecked(KFXGAME_KFXOnCommand),&Parms);
    }
    DECLARE_CLASS(AKFXFaeryAgent,AInfo,0,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(AKFXFaeryAgent)
};

enum EAvatarPart
{
    Avatar_None             =0,
    Avatar_Body             =1,
    Avatar_Head             =2,
    Avatar_Legs             =3,
    Avatar_MAX              =4,
};
enum EFireAnimState
{
    FAS_None                =0,
    FAS_PlayOnce            =1,
    FAS_Looping             =2,
    FAS_Ready               =3,
    FAS_MAX                 =4,
};
struct KFXGAME_API FStepSound
{
    class USound* RunSound[5] GCC_PACK(4);
    class USound* JumpSound;
};

struct KFXGAME_API FKFXRepDamageInfo
{
    class APawn* instigatedBy GCC_PACK(4);
    class AWeaponAttachment* HitWeapon;
    FVector HitLocation;
    FVector Momentum;
    BYTE DmgShakeView;
    BYTE FlashCount;
    INT HitWeaponID GCC_PACK(4);
    INT DamageVal;
};

struct KFXGAME_API FKFXStatePack
{
    BYTE Revision GCC_PACK(4);
    BYTE TeamID;
    INT nRoleID GCC_PACK(4);
    INT nDecorations[9];
    INT nSuitID;
};

struct KFXGAME_API FKFXAvatarData
{
    INT nBodyID GCC_PACK(4);
    INT nHeadID;
    INT nLegsID;
};

#define UCONST_CONS_decoration_count 9

class KFXGAME_API AKFXPawnBase : public AUnrealPawn
{
public:
    class AKFXAvatarPart* AvatarHead GCC_PACK(4);
    class AKFXAvatarPart* AvatarLegs;
    INT KFXOverLapMasks[32];
    FStringNoInit KFXWeapLocTableName;
    BITFIELD bLeftStep:1 GCC_PACK(4);
    FLOAT fPlayStepSoundRate GCC_PACK(4);
    FLOAT fShowStepEffectRate;
    FLOAT lastShowStepEffectTime;
    FLOAT AshesKeepingTime;
    FLOAT ClientAshesKeepingTime;
    FLOAT AshesDisappearTime;
    INT AshesHitEnable;
    FLOAT FootstepVolume;
    FLOAT FootstepRadius;
    FLOAT HitSoundVolume;
    FLOAT HitSoundRadius;
    FLOAT FootstepRate;
    FLOAT BobTimeFactor;
    FLOAT MinTimeBetweenPainSounds;
    class USound* SoundFootsteps[11];
    class USound* SoundLand[11];
    class USound* SoundFallPains;
    class USound* HeadshotSound;
    class USound* BodyshotSound;
    class USound* KnifeHitSound;
    class USound* HammerHitSound;
    class USound* DeadSound;
    class USound* CrySound[5];
    class USound* HitBodySound[4];
    class USound* HitHeadSound[4];
    TArrayNoInit<FStepSound> StepSounds;
    INT LastStepSoundIndex;
    BITFIELD KFXUseEightDirectionMoveAnims:1 GCC_PACK(4);
    FName KFXRunAnimsExt[4] GCC_PACK(4);
    FName KFXWalkAnimsExt[4];
    FName KFXCrouchAnimsExt[4];
    FName KFXSwimAnimsExt[4];
    FName KFXFlyAnimsExt[4];
    FName BombDeathAnimName;
    FName HitHeadDeathAnimExt[12];
    FName HitCrouchHeadDeathAnimExt[12];
    FName HitBodyDeathAnimExt[12];
    FName HitCrouchBodyDeathAnimExt[12];
    FName HitLegsDeathAnimExt[3];
    FName ExplodeDeathAnimExt[3];
    class AKFXWeapAttachment* WeaponAttachment;
    FName FireRootBone;
    FName WeaponBone;
    BYTE FireState;
    INT KFXHitWeaponID GCC_PACK(4);
    FLOAT dmgTimeDisply;
    FKFXRepDamageInfo KFXDmgRepInfo;
    FKFXRepDamageInfo KFXSavedDmgRepInfo;
    INT KFXArmorID;
    INT KFXArmorPoints;
    INT KFXArmorMaxPoints;
    FLOAT KFXArmorHeadFactor;
    FLOAT KFXArmorBodyFactor;
    INT MultiJumpRemaining;
    INT MaxMultiJump;
    INT DoubleJumpZ;
    FLOAT DoubleJumpZThresh;
    BITFIELD bIsGroveling:1 GCC_PACK(4);
    BITFIELD bKFXCanDodge:1;
    INT CanMoveCount GCC_PACK(4);
    BITFIELD bCanFire:1 GCC_PACK(4);
    BITFIELD bCanUseWeapon:1;
    FLOAT ProneCollisionRadius GCC_PACK(4);
    FLOAT ProneCollisionHeight;
    FLOAT KFXDamageFactor;
    TArrayNoInit<FLOAT> KFXDiffPartDmg;
    FLOAT KFXHeadKillProb;
    FLOAT KFXAnimalRecoverTime;
    FLOAT KFXFPSoundScale;
    FLOAT KFXSpeedScale;
    BITFIELD KFXLevelAllowHideWeap:1 GCC_PACK(4);
    FLOAT WeapJumpFactor GCC_PACK(4);
    INT TickIndex;
    FKFXStatePack KFXCurrentState;
    FKFXStatePack KFXPendingState;
    FKFXStatePack KFXNormalState;
    BITFIELD bSpecialRoleState:1 GCC_PACK(4);
    FKFXAvatarData KFXAvatar GCC_PACK(4);
    BITFIELD KFXIsAvatar:1 GCC_PACK(4);
    INT KFXDefAniState GCC_PACK(4);
    INT KFXCurAniState;
    FName FireAnim[2];
    FName CrouchFireAnim[2];
    FName HitAnim[4];
    FName ReloadAnim;
    FName CrouchReloadAnim;
    FName SwitchWeaponAnim;
    FName UndeployAnim;
    FName HitHeadAnimExt[12];
    FName HitBodyAnimExt[12];
    FName HitLegAnimExt[12];
    FName CHitAnimExt[3];
    FName BlendRunAnim[4];
    FName BlendWalkAnims[4];
    FName BlendCrouchAnims[4];
    class AShadowProjector* KFXPlayerBodyShadow;
    class AShadowProjector* KFXPlayerHeadShadow;
    class AShadowProjector* KFXPlayerLegsShadow;
    class UMaterial* KFXInvisSkin;
    class UClass* BornEffectClass;
    class UClass* RecoverEffectClass;
    class UClass* LastRecoverEffectClass;
    class UClass* StepWaterEffectClass;
    BITFIELD RagdollEnabled:1 GCC_PACK(4);
    FStringNoInit RagdollOverride GCC_PACK(4);
    FLOAT RagInvInertia;
    FLOAT RagDeathVel;
    FLOAT RagShootStrength;
    FLOAT RagSpinScale;
    FLOAT RagDeathUpKick;
    FName PelvisBone;
    FName Spine1Bone;
    FName Spine2Bone;
    FName Spine3Bone;
    INT LastAngleRotated;
    INT LastFacingDir;
    INT SmoothStep;
    FLOAT LastSecSmooth;
    FLOAT CurrentSecSmooth;
    FLOAT fxKFXGasArmourFactor;
    FVector CameraOffset;
    FLOAT SpeedDownTime;
    FLOAT SpeedDownFactor;
    FLOAT DamagedSpeedDownRate;
    FLOAT DamageValue;
    FLOAT LandedSpeedDownScale;
    DECLARE_CLASS(AKFXPawnBase,AUnrealPawn,0|CLASS_Config,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(AKFXPawnBase)
};


class KFXGAME_API AKFXPlaneSomke : public AEmitter
{
public:
    DECLARE_FUNCTION(execUpdateDamagedEffect);
    DECLARE_CLASS(AKFXPlaneSomke,AEmitter,0,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(AKFXPlaneSomke)
};


class KFXGAME_API AKFXAvatarPart : public AAvatarPart
{
public:
    class AKFXPawnBase* KFXBasePawn GCC_PACK(4);
    INT KFXAvatarID;
    BYTE KFXTeamID;
    INT ModeID GCC_PACK(4);
    DECLARE_CLASS(AKFXAvatarPart,AAvatarPart,0,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(AKFXAvatarPart)
};

struct KFXGAME_API FArmorPctData
{
    FLOAT ArmorPct[2] GCC_PACK(4);
};

#define UCONST_NUM_SND_FPSMALLFIRE 4
#define UCONST_KFX_WPN_ARMORREDUCEPCT_TOTLE_NUM 2
#define UCONST_KFX_WPN_AMMORREDUCEPCT_CLASSIC_NUM 2
#define UCONST_KFX_WPN_AMMORREDUCEPCT_LEVEL_NUM 1
#define UCONST_KFX_MAX_ACCESSORY_NUM 7
#define UCONST_KFX_CFG_TRACK_FACTOR_NUM 10
#define UCONST_NUM_SND_FPFIRE_WB 8

class KFXGAME_API AKFXWeapBase : public AWeapon
{
public:
    BITFIELD bIsReload:1 GCC_PACK(4);
    BITFIELD bCannotSwitchWhileFiring:1;
    BITFIELD KFXWeaponShowHint:1;
    INT KFXMaxAmmo[2] GCC_PACK(4);
    class AActor* KFXLockedTarget;
    INT KFXMagicItemID;
    BITFIELD bKFXShowBringUpHint:1 GCC_PACK(4);
    BITFIELD bKFXShowPickupWeapHint:1;
    INT KFXInitAmmoCount[2] GCC_PACK(4);
    INT KFXInitReload[2];
    INT KFXInitReloadMax[2];
    BYTE KFXHasCartridgeClip[2];
    BITFIELD bNoAmmo:1 GCC_PACK(4);
    INT KFXWeaponID GCC_PACK(4);
    FLOAT KFXSpeedFactor[2];
    INT KFXReloadMode;
    FLOAT KFXPreReloadTime;
    FLOAT KFXNormalReloadTime;
    FLOAT KFXNullReloadTime;
    FLOAT KFXEndReloadTime;
    FLOAT KFXFinishReloadTime;
    INT KFXAmmoCount[2];
    INT KFXReload[2];
    INT KFXReloadMax[2];
    INT KFXClientSimReload[2];
    INT KFXModeDamage[2];
    FLOAT KFXModeRate[2];
    INT KFXModeRange[2];
    BITFIELD KFXCanJumpFire:1 GCC_PACK(4);
    BITFIELD KFXCanJumpSwitchState:1;
    FLOAT KFXLandFireStopSec GCC_PACK(4);
    FLOAT KFXLandFireStopTime;
    INT KFXCornerStaticShotsCount[2];
    INT KFXMode0ValidRange[4];
    INT KFXMode1ValidRange[4];
    FLOAT KFXMode0ValidDmgFactor[4];
    FLOAT KFXMode1ValidDmgFactor[4];
    FLOAT KFXScoreDmgPct[2];
    FLOAT KFXHeadKillProp[2];
    FLOAT KFXAddHeadKill[2];
    FLOAT KFXReHeadKill[2];
    INT KFXModeAmmoPerFire[2];
    INT KFXModeShotPerFire[2];
    INT KFXModeMomentum[2];
    FLOAT KFXModeArmorPct[2];
    BITFIELD KFXShareAmmo:1 GCC_PACK(4);
    INT KFXFireGroup GCC_PACK(4);
    INT KFXCrossWoodLength[2];
    INT KFXCrossMetalLength[2];
    INT KFXCrossOtherLength[2];
    FLOAT KFXModeWoodPTDmg[2];
    FLOAT KFXModeMetalPTDmg[2];
    FLOAT KFXModeOtherPTDmg[2];
    FLOAT SpeedDownFactor[2];
    FLOAT SpeedDownTime[2];
    INT KFXCfgTrackFactor[10];
    INT KFXFPHandID;
    INT KFXAccessory[7];
    class AKFXWeapAccesory* KFXAccessoryMesh[7];
    FLOAT KFXWeaponArmorPct[2];
    FArmorPctData KFXModeDmgArmorPct[2];
    FName StartReloadAnim;
    FName AfterReloadAnim;
    FName ReloadNormalAnim;
    FName ReloadNullAnim;
    FLOAT StartReloadAnimRate;
    FLOAT AfterReloadAnimRate;
    FLOAT ReloadNormalAnimRate;
    FLOAT ReloadNullAnimRate;
    FVector KFXInitPlayerViewOffset;
    FRotator KFXInitPlayerViewPivot;
    FLOAT PunchAngleDecayDamp[2];
    FLOAT PunchAngleDecaySpring[2];
    FLOAT KFXMouseSens[2];
    FLOAT KFXDefDisplayFov[2];
    FVector KFXPlayerViewOffset[2];
    FRotator KFXPlayerViewPivot[2];
    FStringNoInit KFXWeapHotStr;
    class UTexture* KFXWeapHotTex;
    FStringNoInit KFXWeapHotBGStr;
    class UTexture* KFXWeapHotBGTex;
    class UClass* KFXWeapHotEffectClass;
    class AActor* KFXWeapHotEffect;
    class USound* KFXSndTPFire[2];
    class USound* KFXSndFPFire[8];
    class USound* KFXSndReload;
    class USound* KFXSndNoammo;
    FStringNoInit KFXBringUpHint;
    class AWeaponComponent* KFXWeapComponent[6];
    FLOAT WeapDurable;
    BITFIELD bRepForceSwitch:1 GCC_PACK(4);
    BITFIELD bZeroCount:1;
    FLOAT CurTime GCC_PACK(4);
    BITFIELD bStartFire:1 GCC_PACK(4);
    BITFIELD bHasTossed:1;
    INT GroupOfLastKill GCC_PACK(4);
    BITFIELD bShowTrack:1 GCC_PACK(4);
    BITFIELD bShowAnoFireSound:1;
    FStringNoInit AnoFireSound GCC_PACK(4);
    class USound* KFXSndTPSmallFire[2];
    class USound* KFXSndFPSmallFire[4];
    FLOAT BeginFireSoundTime;
    INT ErrorReloadNum;
    BITFIELD bIsDoubleComponent:1 GCC_PACK(4);
    DECLARE_FUNCTION(execDestroyFireMode);
    DECLARE_CLASS(AKFXWeapBase,AWeapon,0|CLASS_Config,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(AKFXWeapBase)
};

struct KFXGAME_API FKFXKickBackParams
{
    FLOAT up_base GCC_PACK(4);
    FLOAT lateral_base;
    FLOAT up_modifier;
    FLOAT lateral_modifier;
    FLOAT up_max;
    FLOAT lateral_max;
    INT direction_change;
};

struct KFXGAME_API FKFXSpreadParams
{
    FLOAT Param1 GCC_PACK(4);
    FLOAT Param2;
};

#define UCONST_KFX_MAX_ACCESSORY_NUM 7
#define UCONST_NUM_FIRE_MODES 2
#define UCONST_NUM_SND_FPFIRE_WC 4
#define UCONST_KFX_PAWN_STATE_NUM 5

class KFXGAME_API AWeaponComponent : public AInventory
{
public:
    BITFIELD bInitToWeapon:1 GCC_PACK(4);
    INT ComponentTypeID GCC_PACK(4);
    INT WeaponTypeID;
    INT WeaponPart;
    class AKFXWeapBase* FirstPersonWeapon;
    INT FireModeValue[2];
    FLOAT KFXFireFlyFactor[2];
    FLOAT KFXAccuracyDivision[2];
    FLOAT KFXAccuracyOffset[2];
    FLOAT KFXMaxInaccuracy[2];
    INT KFXSpreadType[2];
    FKFXKickBackParams KFXParam_KB1[5];
    FKFXKickBackParams KFXParam_KB2[5];
    FKFXSpreadParams KFXParam_SP1[5];
    FKFXSpreadParams KFXParam_SP2[5];
    INT KFXCornerStaticShotsCount[2];
    INT KFXFPHandID;
    INT KFXAccessory[7];
    FLOAT KFXReloadTime;
    FLOAT KFXSpeedFactor[2];
    FLOAT KFXModeRate[2];
    INT KFXModeDamage[2];
    INT KFXModeRange[2];
    INT KFXMode0ValidRange[4];
    INT KFXMode1ValidRange[4];
    FLOAT KFXMode0ValidDmgFactor[4];
    FLOAT KFXMode1ValidDmgFactor[4];
    INT KFXAmmoCount[2];
    INT KFXReloadMax[2];
    INT DamageTypeValue;
    INT AltDamageTypeValue;
    FArmorPctData KFXModeDmgArmorPct[2];
    FLOAT KFXWeaponArmorPct[2];
    FLOAT BringUpTime;
    FLOAT SelectAnimRate;
    FLOAT PutDownAnimRate;
    FLOAT KFXPreReloadTime;
    FLOAT KFXNormalReloadTime;
    FLOAT KFXNullReloadTime;
    FLOAT KFXEndReloadTime;
    FLOAT StartReloadAnimRate;
    FLOAT AfterReloadAnimRate;
    FLOAT ReloadNormalAnimRate;
    FLOAT ReloadNullAnimRate;
    FLOAT PunchAngleDecayDamp;
    FLOAT PunchAngleDecaySpring;
    class UClass* FireFlashClass;
    FName FireAnim;
    BITFIELD bShowTrack:1 GCC_PACK(4);
    BITFIELD bShowAnotherFireSound:1;
    class USound* KFXSndTPFire[2] GCC_PACK(4);
    FStringNoInit KFXSndTPFireString[2];
    class USound* KFXSndFPFire[4];
    FStringNoInit KFXSndFPFireString[4];
    FVector RelLocation;
    FRotator RelRottation;
    TArrayNoInit<FString> FPWeapSkins;
    class AActor* DoubleComponent;
    FStringNoInit DBComponentMesh;
    BITFIELD bIsDoubleComponent:1 GCC_PACK(4);
    FVector AnoLocation GCC_PACK(4);
    FRotator AnoRottation;
    FLOAT AnoDrawScale;
    DECLARE_CLASS(AWeaponComponent,AInventory,0,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(AWeaponComponent)
};


class KFXGAME_API AKFXWeapAccesory : public AInventory
{
public:
    class AKFXWeapBase* WeapBase GCC_PACK(4);
    INT KFXAccessoryID;
    DECLARE_CLASS(AKFXWeapAccesory,AInventory,0,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(AKFXWeapAccesory)
};

enum EDVTalkType
{
    DVTT_SPATIAL            =0,
    DVTT_TEAM               =1,
    DVTT_SPATIAL_TEAM       =2,
    DVTT_MAX                =3,
};
enum EDVVoiceFont
{
    VF_NONE                 =0,
    VF_PRESET_W2M           =1,
    VF_PRESET_M2W           =2,
    VF_PRESET_ELF           =3,
    VF_PRESET_PIG1          =4,
    VF_PRESET_PIG2          =5,
    VF_PRESET_PIG3          =6,
    VF_PRESET_TORTOISE1     =7,
    VF_PRESET_TORTOISE2     =8,
    VF_PRESET_TORTOISE3     =9,
    VF_EXT_MALE1            =10,
    VF_EXT_MALE2            =11,
    VF_EXT_MALE3            =12,
    VF_EXT_FEMALE1          =13,
    VF_EXT_FEMALE2          =14,
    VF_EXT_FEMALE3          =15,
    VF_MAX                  =16,
};
enum EDVRoomMode
{
    RM_NORMAL               =0,
    RM_CAVERN               =1,
    RM_SMALL                =2,
    RM_MAX                  =3,
};
enum EDVSpeakTest
{
    SPKT_VOICE_5_1          =0,
    SPKT_NOISE_5_1          =1,
    SPKT_NOISE_SWEEP        =2,
    SPKT_MAX                =3,
};
enum EDVMicTest
{
    MICT_LOOPBACK           =0,
    MICT_TO_SERVER          =1,
    MICT_MAX                =2,
};
enum EDVEngine
{
    ENG_DEFAULT             =0,
    ENG_MONO                =1,
    ENG_DIRECTX             =2,
    ENG_DOLBYHEADPHONE      =3,
    ENG_DOLBYVIRTUALSPEAKER =4,
    ENG_MAX                 =5,
};
enum EDVDevice
{
    DEV_UNKNOWN             =0,
    DEV_CAPTURE             =1,
    DEV_HEADPHONES          =2,
    DEV_STEREOSPEAKERS      =3,
    DEV_SURROUNDSPEAKERS    =4,
    DEV_MAX                 =5,
};
struct KFXGAME_API FDVDeviceInfo
{
    INT nID GCC_PACK(4);
    FString sName;
    BYTE DevType;
    BITFIELD bSysDefault:1 GCC_PACK(4);
    BITFIELD bDVDefault:1;
    BYTE Engine GCC_PACK(4);
};

struct KFXGAME_API FDVClientStatus
{
    INT nPing GCC_PACK(4);
    INT nNetIn;
    INT nNetOut;
    FString sGameServerName;
    FString sAudioServerName;
    BYTE TalkVolume;
    BITFIELD bRunning:1 GCC_PACK(4);
    BITFIELD bPremium:1;
};


struct AKFXDVClientAgent_eventOnMicTestDone_Parms
{
};
struct AKFXDVClientAgent_eventOnSpeakTestDone_Parms
{
};
class KFXGAME_API AKFXDVClientAgent : public AActor
{
public:
    BITFIELD bDVPremium:1 GCC_PACK(4);
    BYTE DVEngine GCC_PACK(4);
    INT DVCodec GCC_PACK(4);
    FLOAT DVListenVolume;
    FLOAT DVSpeakVolume;
    BITFIELD bDVListenEnabled:1 GCC_PACK(4);
    BITFIELD bDVSpeakEnabled:1;
    BITFIELD bDVUpdateStatus:1;
    FDVClientStatus DVStatus GCC_PACK(4);
    BYTE DVCurVoiceFont;
    BITFIELD bDVValid:1 GCC_PACK(4);
    BITFIELD bDVTeamTalk:1;
    BITFIELD bDVSpatialTalk:1;
    BYTE DVSpatialChnMapping GCC_PACK(4);
    BYTE DVTeamChnMapping;
    FLOAT DVUpdateInterval GCC_PACK(4);
    TArrayNoInit<INT> BannedID;
    FScriptDelegate __OnSpeakTestDone__Delegate;
    FScriptDelegate __OnMicTestDone__Delegate;
    DECLARE_FUNCTION(exec_DVPause);
    DECLARE_FUNCTION(exec_DVAutoTick);
    DECLARE_FUNCTION(exec_DVSetEngine);
    DECLARE_FUNCTION(exec_DVStopMicTest);
    DECLARE_FUNCTION(exec_DVStartMicTest_Play);
    DECLARE_FUNCTION(exec_DVStartMicTest_Record);
    DECLARE_FUNCTION(exec_DVStopSpeakTest);
    DECLARE_FUNCTION(exec_DVStartSpeakTest);
    DECLARE_FUNCTION(exec_DVSetCurrentOutputDevice);
    DECLARE_FUNCTION(exec_DVSetCurrentInputDevice);
    DECLARE_FUNCTION(exec_DVGetCurrentOutputDevice);
    DECLARE_FUNCTION(exec_DVGetCurrentInputDevice);
    DECLARE_FUNCTION(exec_DVGetAllDevice);
    DECLARE_FUNCTION(exec_DVOnlyTalkIntoChannelMapping);
    DECLARE_FUNCTION(exec_DVTalkIntoChannelMapping);
    DECLARE_FUNCTION(exec_DVSetVoiceFont);
    DECLARE_FUNCTION(exec_DVSetRoomMode);
    DECLARE_FUNCTION(exec_DVTick);
    DECLARE_FUNCTION(exec_DVGetStatus);
    DECLARE_FUNCTION(exec_DVSetRotation);
    DECLARE_FUNCTION(exec_DVIsActive);
    DECLARE_FUNCTION(exec_DVInit);
    DECLARE_FUNCTION(exec_DVSetClientInfo);
    DECLARE_FUNCTION(exec_DVSetAudioServerInfo);
    DECLARE_FUNCTION(exec_DVSetListenVolume);
    DECLARE_FUNCTION(exec_DVSetSpeakEnable);
    DECLARE_FUNCTION(exec_DVSetListenEnable);
    void delegateOnMicTestDone()
    {
        ProcessDelegate(KFXGAME_OnMicTestDone,&__OnMicTestDone__Delegate,NULL);
    }
    void delegateOnSpeakTestDone()
    {
        ProcessDelegate(KFXGAME_OnSpeakTestDone,&__OnSpeakTestDone__Delegate,NULL);
    }
    DECLARE_CLASS(AKFXDVClientAgent,AActor,0|CLASS_Config,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(AKFXDVClientAgent)
};

enum EDVPriority
{
    PRI_0                   =0,
    PRI_1                   =1,
    PRI_2                   =2,
    PRI_3                   =3,
    PRI_MAX                 =4,
};
enum EDVChannelProperty
{
    CHP_HEARING_RANGE       =0,
    CHP_EFFECT              =1,
    CHP_NUM_AVATARS         =2,
    CHP_SPATIAL             =3,
    CHP_MAX                 =4,
};
enum EDVChannel
{
    CHN_SPATIAL             =0,
    CHN_NON_SPATIAL         =1,
    CHN_DIRECT_WK           =2,
    CHN_NORM_WK             =3,
    CHN_MAX                 =4,
};
struct KFXGAME_API FDVPlayerStatus
{
    BYTE TalkVolume GCC_PACK(4);
    INT nLastContactSeconds GCC_PACK(4);
    BITFIELD bConnected:1 GCC_PACK(4);
    BITFIELD bPremium:1;
    INT nMorphID GCC_PACK(4);
};

struct KFXGAME_API FDVAudioServerStatus
{
    BITFIELD control_server_connected:1 GCC_PACK(4);
    INT control_server_uptime GCC_PACK(4);
    FLOAT control_server_load;
    BITFIELD audio_server_connected:1 GCC_PACK(4);
    INT audio_server_uptime GCC_PACK(4);
    FLOAT audio_server_load;
    INT clients_connected;
    INT clients_connected2;
    INT packets_out;
    INT packets_out_sec;
    FLOAT kbytes_out;
    INT bytes_out_sec;
    INT packets_in;
    INT packets_in_sec;
    FLOAT kbytes_in;
    INT bytes_in_sec;
};


class KFXGAME_API AKFXDVServerAgent : public AActor
{
public:
    INT DVSpatialChnID GCC_PACK(4);
    INT DVTeam1ChnID;
    INT DVTeam2ChnID;
    INT DVTeam1DirChnID;
    INT DVTeam2DirChnID;
    INT DVSpatialChnMapping;
    INT DVTeam1ChnMapping;
    INT DVTeam2ChnMapping;
    FStringNoInit DVASIP;
    INT DVASPort;
    FStringNoInit DVCSIP;
    INT DVCSPort;
    FLOAT DVUpdateInterval;
    INT DVGameID;
    FLOAT DVDefHearRange;
    DECLARE_FUNCTION(exec_DVMapSpatialChannel);
    DECLARE_FUNCTION(exec_DVGetServerStatus);
    DECLARE_FUNCTION(exec_DVGetPlayerStatus);
    DECLARE_FUNCTION(exec_DVMuteManyToOne);
    DECLARE_FUNCTION(exec_DVMuteOneToMany);
    DECLARE_FUNCTION(exec_DVMuteOneToOne);
    DECLARE_FUNCTION(exec_DVChannelListenLeaveAll);
    DECLARE_FUNCTION(exec_DVChannelListenLeave);
    DECLARE_FUNCTION(exec_DVChannelListenJoin);
    DECLARE_FUNCTION(exec_DVChannelTalkLeaveAll);
    DECLARE_FUNCTION(exec_DVChannelTalkLeave);
    DECLARE_FUNCTION(exec_DVChannelTalkJoin);
    DECLARE_FUNCTION(exec_DVSetPlayerChannelPos);
    DECLARE_FUNCTION(exec_DVSetPlayerPos);
    DECLARE_FUNCTION(exec_DVChangeTeam);
    DECLARE_FUNCTION(exec_DVDisconnectPlayer);
    DECLARE_FUNCTION(exec_DVConnectPlayer);
    DECLARE_FUNCTION(exec_DVSetChannelProperty);
    DECLARE_FUNCTION(exec_DVGetChannelProperty);
    DECLARE_FUNCTION(exec_DVDestroyChannel);
    DECLARE_FUNCTION(exec_DVCreateChannel);
    DECLARE_FUNCTION(exec_DVDestroy);
    DECLARE_FUNCTION(exec_DVInit);
    DECLARE_CLASS(AKFXDVServerAgent,AActor,0|CLASS_Config,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(AKFXDVServerAgent)
};


struct UKFXCSVManager_eventGetConfigTableByIndex_Parms
{
    INT TableIndex;
    class UKFXCSVTable* ReturnValue;
};
class KFXGAME_API UKFXCSVManager : public UCSVManager
{
public:
    class UKFXCSVTable* eventGetConfigTableByIndex(INT TableIndex)
    {
        UKFXCSVManager_eventGetConfigTableByIndex_Parms Parms;
        Parms.ReturnValue=0;
        Parms.TableIndex=TableIndex;
        ProcessEvent(FindFunctionChecked(KFXGAME_GetConfigTableByIndex),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UKFXCSVManager,UCSVManager,0,KFXGame)
    NO_DEFAULT_CONSTRUCTOR(UKFXCSVManager)
};

#endif

AUTOGENERATE_FUNCTION(AKFXPlaneSomke,-1,execUpdateDamagedEffect);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVPause);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVAutoTick);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetEngine);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVStopMicTest);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVStartMicTest_Play);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVStartMicTest_Record);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVStopSpeakTest);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVStartSpeakTest);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetCurrentOutputDevice);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetCurrentInputDevice);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVGetCurrentOutputDevice);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVGetCurrentInputDevice);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVGetAllDevice);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVOnlyTalkIntoChannelMapping);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVTalkIntoChannelMapping);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetVoiceFont);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetRoomMode);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVTick);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVGetStatus);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetRotation);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVIsActive);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVInit);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetClientInfo);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetAudioServerInfo);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetListenVolume);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetSpeakEnable);
AUTOGENERATE_FUNCTION(AKFXDVClientAgent,-1,exec_DVSetListenEnable);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVMapSpatialChannel);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVGetServerStatus);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVGetPlayerStatus);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVMuteManyToOne);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVMuteOneToMany);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVMuteOneToOne);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVChannelListenLeaveAll);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVChannelListenLeave);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVChannelListenJoin);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVChannelTalkLeaveAll);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVChannelTalkLeave);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVChannelTalkJoin);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVSetPlayerChannelPos);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVSetPlayerPos);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVChangeTeam);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVDisconnectPlayer);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVConnectPlayer);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVSetChannelProperty);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVGetChannelProperty);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVDestroyChannel);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVCreateChannel);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVDestroy);
AUTOGENERATE_FUNCTION(AKFXDVServerAgent,-1,exec_DVInit);
AUTOGENERATE_FUNCTION(AKFXWeapBase,-1,execDestroyFireMode);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execGetItemDurable);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execIsItemInEquipList);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execNotifyPlayerLogInGameServer);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execKFXIsKFXServerMode);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execKFXGetAgent);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execKFXUnRegist);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execKFXRegist);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execKFXNotifyPlayerLeave);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execKFXNotifyGameEnd);
AUTOGENERATE_FUNCTION(AKFXFaeryAgent,-1,execKFXNotifyGameReady);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif


#ifdef NATIVE_DEFS_ONLY
DECLARE_NATIVE_TYPE(KFXGame,AKFXPlaneSomke);
DECLARE_NATIVE_TYPE(KFXGame,AKFXDVClientAgent);
DECLARE_NATIVE_TYPE(KFXGame,AKFXDVServerAgent);
DECLARE_NATIVE_TYPE(KFXGame,AKFXAvatarPart);
DECLARE_NATIVE_TYPE(KFXGame,AKFXPawnBase);
DECLARE_NATIVE_TYPE(KFXGame,AWeaponComponent);
DECLARE_NATIVE_TYPE(KFXGame,AKFXWeapBase);
DECLARE_NATIVE_TYPE(KFXGame,AKFXWeapAccesory);
DECLARE_NATIVE_TYPE(KFXGame,UKFXCSVManager);
DECLARE_NATIVE_TYPE(KFXGame,AKFXFaeryAgent);

#define AUTO_INITIALIZE_REGISTRANTS_KFXGAME \
	AKFXPlaneSomke::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindKFXGameAKFXPlaneSomkeNative; \
	AKFXDVClientAgent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindKFXGameAKFXDVClientAgentNative; \
	AKFXDVServerAgent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindKFXGameAKFXDVServerAgentNative; \
	AKFXAvatarPart::StaticClass(); \
	AKFXPawnBase::StaticClass(); \
	AWeaponComponent::StaticClass(); \
	AKFXWeapBase::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindKFXGameAKFXWeapBaseNative; \
	AKFXWeapAccesory::StaticClass(); \
	UKFXCSVManager::StaticClass(); \
	AKFXFaeryAgent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindKFXGameAKFXFaeryAgentNative; \
	UKFXServerCommandlet::StaticClass(); \

#endif // NATIVE_DEFS_ONLY

#ifdef NATIVES_ONLY
NATIVE_INFO(AKFXPlaneSomke) GKFXGameAKFXPlaneSomkeNatives[] = 
{ 
	MAP_NATIVE(AKFXPlaneSomke,execUpdateDamagedEffect)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(KFXGame,AKFXPlaneSomke);

NATIVE_INFO(AKFXDVClientAgent) GKFXGameAKFXDVClientAgentNatives[] = 
{ 
	MAP_NATIVE(AKFXDVClientAgent,exec_DVPause)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVAutoTick)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetEngine)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVStopMicTest)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVStartMicTest_Play)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVStartMicTest_Record)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVStopSpeakTest)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVStartSpeakTest)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetCurrentOutputDevice)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetCurrentInputDevice)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVGetCurrentOutputDevice)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVGetCurrentInputDevice)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVGetAllDevice)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVOnlyTalkIntoChannelMapping)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVTalkIntoChannelMapping)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetVoiceFont)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetRoomMode)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVTick)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVGetStatus)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetRotation)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVIsActive)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVInit)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetClientInfo)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetAudioServerInfo)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetListenVolume)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetSpeakEnable)
	MAP_NATIVE(AKFXDVClientAgent,exec_DVSetListenEnable)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(KFXGame,AKFXDVClientAgent);

NATIVE_INFO(AKFXDVServerAgent) GKFXGameAKFXDVServerAgentNatives[] = 
{ 
	MAP_NATIVE(AKFXDVServerAgent,exec_DVMapSpatialChannel)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVGetServerStatus)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVGetPlayerStatus)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVMuteManyToOne)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVMuteOneToMany)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVMuteOneToOne)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVChannelListenLeaveAll)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVChannelListenLeave)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVChannelListenJoin)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVChannelTalkLeaveAll)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVChannelTalkLeave)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVChannelTalkJoin)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVSetPlayerChannelPos)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVSetPlayerPos)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVChangeTeam)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVDisconnectPlayer)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVConnectPlayer)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVSetChannelProperty)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVGetChannelProperty)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVDestroyChannel)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVCreateChannel)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVDestroy)
	MAP_NATIVE(AKFXDVServerAgent,exec_DVInit)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(KFXGame,AKFXDVServerAgent);

NATIVE_INFO(AKFXWeapBase) GKFXGameAKFXWeapBaseNatives[] = 
{ 
	MAP_NATIVE(AKFXWeapBase,execDestroyFireMode)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(KFXGame,AKFXWeapBase);

NATIVE_INFO(AKFXFaeryAgent) GKFXGameAKFXFaeryAgentNatives[] = 
{ 
	MAP_NATIVE(AKFXFaeryAgent,execGetItemDurable)
	MAP_NATIVE(AKFXFaeryAgent,execIsItemInEquipList)
	MAP_NATIVE(AKFXFaeryAgent,execNotifyPlayerLogInGameServer)
	MAP_NATIVE(AKFXFaeryAgent,execKFXIsKFXServerMode)
	MAP_NATIVE(AKFXFaeryAgent,execKFXGetAgent)
	MAP_NATIVE(AKFXFaeryAgent,execKFXUnRegist)
	MAP_NATIVE(AKFXFaeryAgent,execKFXRegist)
	MAP_NATIVE(AKFXFaeryAgent,execKFXNotifyPlayerLeave)
	MAP_NATIVE(AKFXFaeryAgent,execKFXNotifyGameEnd)
	MAP_NATIVE(AKFXFaeryAgent,execKFXNotifyGameReady)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(KFXGame,AKFXFaeryAgent);

#endif // NATIVES_ONLY

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(AKFXPlaneSomke)
VERIFY_CLASS_SIZE_NODIE(AKFXDVClientAgent)
VERIFY_CLASS_SIZE_NODIE(AKFXDVServerAgent)
VERIFY_CLASS_SIZE_NODIE(AKFXAvatarPart)
VERIFY_CLASS_SIZE_NODIE(AKFXPawnBase)
VERIFY_CLASS_SIZE_NODIE(AWeaponComponent)
VERIFY_CLASS_SIZE_NODIE(AKFXWeapBase)
VERIFY_CLASS_SIZE_NODIE(AKFXWeapAccesory)
VERIFY_CLASS_SIZE_NODIE(UKFXCSVManager)
VERIFY_CLASS_SIZE_NODIE(AKFXFaeryAgent)
#endif // VERIFY_CLASS_SIZES
